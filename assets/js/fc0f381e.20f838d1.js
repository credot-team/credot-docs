(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{136:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return c})),r.d(n,"metadata",(function(){return s})),r.d(n,"toc",(function(){return d})),r.d(n,"default",(function(){return p}));var t=r(3),o=r(7),a=(r(0),r(142)),c={title:"example",sidebar_position:2},s={unversionedId:"advanced/CICD/example",id:"advanced/CICD/example",isDocsHomePage:!1,title:"example",description:"network",source:"@site/docs/advanced/CICD/example.md",sourceDirName:"advanced/CICD",slug:"/advanced/CICD/example",permalink:"/credot-docs/docs/advanced/CICD/example",editUrl:"https://github.com/skynocover/credot-docs/tree/documentation/docs/advanced/CICD/example.md",version:"current",sidebarPosition:2,frontMatter:{title:"example",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"setting",permalink:"/credot-docs/docs/advanced/CICD/setting"},next:{title:"\u4f7f\u7528 Neo4j",permalink:"/credot-docs/docs/advanced/neo4j"}},d=[{value:"network",id:"network",children:[]},{value:"\u5f8c\u7aef",id:"\u5f8c\u7aef",children:[{value:"dockerfile",id:"dockerfile",children:[]},{value:"drone",id:"drone",children:[]},{value:"docker-compose",id:"docker-compose",children:[]}]},{value:"\u524d\u7aef",id:"\u524d\u7aef",children:[{value:"dockerfile",id:"dockerfile-1",children:[]},{value:"drone",id:"drone-1",children:[]},{value:"docker-compose",id:"docker-compose-1",children:[]}]},{value:"\u670d\u52d9proxy",id:"\u670d\u52d9proxy",children:[]}],i={toc:d};function p(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},i,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"network"},"network"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"version: '3.1'\n\nservices:\n\n  db:\n    image: postgres\n    container_name: postgres\n    networks:\n      - db\n    restart: always\n    environment:\n      POSTGRES_USER: root\n      POSTGRES_PASSWORD: 2wsx4rfv6yhn\n\n  adminer:\n    image: adminer\n    restart: always\n    networks:\n      - db\n    ports:\n      - 8081:8080\n\nnetworks:\n  db:\n    driver: bridge\n")),Object(a.b)("h2",{id:"\u5f8c\u7aef"},"\u5f8c\u7aef"),Object(a.b)("h3",{id:"dockerfile"},"dockerfile"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-dockerfile"},'# --------------\x3e The build image\nFROM node:latest AS build\nWORKDIR /usr/src/app\nCOPY src /usr/src/app/src\nCOPY package.json /usr/src/app/\nCOPY tsconfig.json /usr/src/app/\nCOPY setting.toml /usr/src/app/\nCOPY .env /usr/src/app/\nCOPY cfg /usr/src/app/cfg\nRUN yarn global add typescript\nRUN yarn global add yarn\nRUN yarn install\n\n# --------------\x3e The production image\nFROM node:lts-alpine\nRUN apk add dumb-init\nENV NODE_ENV production\nUSER node\nWORKDIR /usr/src/app\nCOPY --chown=node:node --from=build /usr/src/app/node_modules /usr/src/app/node_modules\nCOPY --chown=node:node . /usr/src/app\nCMD ["dumb-init", "yarn", "createDB"]\n')),Object(a.b)("h3",{id:"drone"},"drone"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".drone.yml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-drone"},"kind: pipeline\ntype: docker #\u5728docker\u74b0\u5883\u4e2d\u57f7\u884c\nname: test #\u81ea\u5b9a\u7fa9pipleline\u540d\u7a31\n\nsteps: #\u5de5\u4f5c\u5217\u8868\n  - name: build-image #\u81ea\u8a02\u5de5\u4f5c\u540d\u7a31\n    when:\n      event: tag\n    pull: if-not-exists #\u8981\u4e0d\u8981pull\u6307\u5b9a\u7684image\n    image: plugins/docker #\u6307\u5b9a\u8981\u62ff\u4f86\u57f7\u884ccommand\u7684image\u6216\u8005plugin\n    settings:\n      registry: registry.hub.docker.com #dockerhub registry url\n      repo: registry.hub.docker.com/credot/pemen_be #\u6253\u5305\u5b8c\u8981\u4e0a\u50b3\u7684docker repo\u540d\u7a31\n      dockerfile: Dockerfile #\u6839\u64da\u6307\u5b9a\u7684Docker file\u6253\u5305image\n      username:\n        from_secret: hubname\n      password:\n        from_secret: hubsecret\n      tags:\n        - latest\n        - ${DRONE_TAG}\n\n  - name: ssh-deploy\n    when:\n      event: tag\n    image: appleboy/drone-ssh\n    settings:\n      host:\n        from_secret: sshhost\n      username:\n        from_secret: sshname\n      password:\n        from_secret: sshkey\n      port: 22\n      command_timeout: 2m\n      script:\n        - cd /root/be\n        - docker-compose down\n        - docker pull credot/pemen_be\n        - docker-compose up -d\n")),Object(a.b)("h3",{id:"docker-compose"},"docker-compose"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"version: '3.1'\n\nservices:\n  be:\n    image: credot/pemen_be\n    ports:\n      - 3001:3001\n    restart: always\n\nnetworks:\n  default:\n    external: true\n    name: docker_db\n")),Object(a.b)("h2",{id:"\u524d\u7aef"},"\u524d\u7aef"),Object(a.b)("h3",{id:"dockerfile-1"},"dockerfile"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-dockerfile"},'# --------------\x3e The build image\nFROM node:latest AS build\nWORKDIR /usr/src/app\nCOPY src /usr/src/app/src\nCOPY public /usr/src/app/public\nCOPY .env /usr/src/app/\nCOPY craco.config.js /usr/src/app/\nCOPY package.json /usr/src/app/\nCOPY tailwind.config.js /usr/src/app/\nCOPY tsconfig.json /usr/src/app/\nRUN yarn global add typescript\nRUN yarn install\nRUN yarn build\n\n# --------------\x3e The production image\nFROM caddy:2.4.0-alpine\nCOPY --from=build /usr/src/app/build/ /usr/share/caddy/\nCMD ["caddy", "run", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile"]\n')),Object(a.b)("h3",{id:"drone-1"},"drone"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".drone.yml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-drone"},"kind: pipeline\ntype: docker #\u5728docker\u74b0\u5883\u4e2d\u57f7\u884c\nname: test #\u81ea\u5b9a\u7fa9pipleline\u540d\u7a31\n\nsteps: #\u5de5\u4f5c\u5217\u8868\n  - name: build-image #\u81ea\u8a02\u5de5\u4f5c\u540d\u7a31\n    when:\n      event: tag\n    pull: if-not-exists #\u8981\u4e0d\u8981pull\u6307\u5b9a\u7684image\n    image: plugins/docker #\u6307\u5b9a\u8981\u62ff\u4f86\u57f7\u884ccommand\u7684image\u6216\u8005plugin\n    settings:\n      registry: registry.hub.docker.com #dockerhub registry url\n      repo: registry.hub.docker.com/credot/pemen_fe #\u6253\u5305\u5b8c\u8981\u4e0a\u50b3\u7684docker repo\u540d\u7a31\n      dockerfile: Dockerfile #\u6839\u64da\u6307\u5b9a\u7684Docker file\u6253\u5305image\n      username:\n        from_secret: hubname\n      password:\n        from_secret: hubsecret\n      tags:\n        - latest\n        - ${DRONE_TAG}\n\n  - name: ssh-deploy\n    when:\n      event: tag\n    image: appleboy/drone-ssh\n    settings:\n      host:\n        from_secret: sshhost\n      username:\n        from_secret: sshname\n      password:\n        from_secret: sshkey\n      port: 22\n      command_timeout: 2m\n      script:\n        - cd /root/fe # or whereever you put your `deploy.sh`\n        - docker-compose down\n        - docker pull credot/pemen_fe\n        - docker-compose up -d\n\n")),Object(a.b)("h3",{id:"docker-compose-1"},"docker-compose"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"version: '3.1'\n\nservices:\n  fe:\n    image: credot/pemen_fe\n    ports:\n      - 8080:80\n    restart: always\n")),Object(a.b)("h2",{id:"\u670d\u52d9proxy"},"\u670d\u52d9proxy"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-nginx"},"2c873df5d61d.ngrok.io:80 {\n        reverse_proxy /api/* localhost:3001\n        reverse_proxy /graphql localhost:3001\n        reverse_proxy localhost:8080\n}\n")))}p.isMDXComponent=!0},142:function(e,n,r){"use strict";r.d(n,"a",(function(){return l})),r.d(n,"b",(function(){return b}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=o.a.createContext({}),p=function(e){var n=o.a.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},l=function(e){var n=p(e.components);return o.a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),l=p(r),m=t,b=l["".concat(c,".").concat(m)]||l[m]||u[m]||a;return r?o.a.createElement(b,s(s({ref:n},i),{},{components:r})):o.a.createElement(b,s({ref:n},i))}));function b(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,c=new Array(a);c[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:t,c[1]=s;for(var i=2;i<a;i++)c[i]=r[i];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);